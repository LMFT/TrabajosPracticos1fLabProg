#include "Input.h"
#include "LinkedList.h"
#include "Employee.h"
#include "parser.h"
#include "Ui.h"

/** \brief Loads employee data from a text file
 *
 * \param path char* File where to find the path
 * \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int  [-1] if path or pointer to list are NULL
                [0] if elements already exists in the list and the users cancel the load
                 OR amount of elements successfully loaded
 *
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee);
/** \brief Loads employee data from a binary file
 *
 * \param path char* File where to find the path
 * \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int  [-1] if path or pointer to list are NULL
                [0] if elements already exists in the list and the users cancel the load
                 OR amount of elements successfully loaded
 *
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee);

/** \brief Adds a new employee
 *
 * \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int  [-3] if pointer to employee list is NULL
                [-2] if program was unable to allocate memory for a new employee
                [-1] if user cancelled the operation
                [0] if ok
 *
 */
int controller_addEmployee(LinkedList* pArrayListEmployee);
/** \brief Modifies an employee
 *
* \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int  [-4] if pointer to employee list is NULL or if the list is empty
                [-3] if program can't allocate memory for the temp modifications to be stored
                [-2] if user cancelled the modifications
                [-1] if program couldn't find the desired employee
                [0] if ok
 *
 */
int controller_editEmployee(LinkedList* pArrayListEmployee);
/** \brief Deletes an employee
 *
 * \param pArrayListEmployee LinkedList* pointer to employee list
 * \return int  [-3] if pointer to employee list is NULL
                [-2] if program couldn't find the desired employee
                [-1] if user cancelled the operation
                [0] if ok
 *
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee);
/** \brief Shows all employees
 *
 * \param pArrayListEmployee LinkedList* pointer to employee list
 * \return int [0] if pointer to list is NULL or the list is empty
                the amount of listings otherwise
 *
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee);
/** \brief Sorts the employee list
 *
 * \param pArrayListEmployee LinkedList* pointer to employee list
 * \return int [-1] if pointer to list is NULL or the list is empty
                The user selected option otherwise
 *
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee);

/** \brief Saves all the employee data in a text file
 *
 * \param path char* Path to file
 * \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int [-1] if pointer to employee list is NULL or path is NULL
                Amount of elements saved otherwise
 *
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee);
/** \brief Saves all the employee data in a binary file
 *
* \param path char* Path to file
 * \param pArrayListEmployee LinkedList* Pointer to employee list
 * \return int [-1] if pointer to employee list is NULL or path is NULL
                Amount of elements saved otherwise
 *
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee);


/** \brief Searchs the employee list for the employee that matches the passed id
 *
 * \param pArrayListEmployee LinkedList* pointer to employee list
 * \param targetId int searched ID
 * \return int  [-2] if pointer to employee list is NULL or hte list is empty
                [-1] if passed id is not found
                Index of employee if ok
 *
 */
int controller_searchEmployeeById(LinkedList* pArrayListEmployee, int targetId);
/** \brief Saves the last id generated by the user
 *
 * \param path char* path to last id file
 * \return int [-1] if path is NULL
                saved value otherwise
 *
 */
int controller_saveLastId(char* path);
/** \brief Loads the last id generated by the user
 *
 * \param path char* path to last id file
 * \return int [-1] if path is NULL
                loaded value otherwise
 *
 */
int controller_loadLastId(char* path);
